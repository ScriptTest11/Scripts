# Read from CSV file
$workflows = Import-Csv "your_workflow_file.csv"  # Replace with your actual CSV file path

# Configuration
$outputDir = "output"
$prefix = "FAILED"
$baseUrl = "your_base_url_here"  # Replace with your actual base URL
$headers = @{
    "Authorization" = "Bearer your_token_here"  # Replace with your actual headers
    "Content-Type" = "application/json"
}

Write-Host "Starting to process workflows..."
Write-Host "Found $($workflows.Count) workflows to process"

# Create output directory if it doesn't exist
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir | Out-Null
    Write-Host "Created output directory: $outputDir"
}

# Process each workflow from CSV
foreach ($workflow in $workflows) {
    $workflowId = $workflow.WorkflowId.Trim()  # Ensure no whitespace
    Write-Host "`n==============================================="
    Write-Host "Processing Workflow ID: $workflowId"
    Write-Host "==============================================="
    
    try {
        $workflowFile = Join-Path $outputDir "WF-$prefix-$workflowId.csv"
        $executionDetails = @()
        $offset = 0
        $limit = 250
        $totalCount = 0
        $firstRun = $true

        do {
            Write-Host "Fetching executions for workflow $workflowId (offset: $offset, limit: $limit)"
            
            try {
                $uri = "$baseUrl/$workflowId/execution?count=true&filter=status eq 'failure'&offset=$offset&limit=$limit"
                Write-Host "Calling API: $uri"
                
                $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers -ResponseHeadersVariable responseHeaders
                
                if ($firstRun) {
                    $totalCount = [int]($responseHeaders.'x-total-count'[0])
                    Write-Host "Total executions to fetch: $totalCount"
                    $firstRun = $false
                }

                if ($response) {
                    foreach ($execution in $response) {
                        $executionDetails += [PSCustomObject]@{
                            WorkflowId = $workflowId
                            WorkflowName = $workflow.WorkflowName
                            ExecutionId = $execution.id
                            StartTime = $execution.started
                            EndTime = $execution.completed
                        }
                    }
                }

                $offset += $limit
                $percentComplete = [math]::Min(($offset / $totalCount) * 100, 100)
                Write-Host "Progress: $($percentComplete.ToString('0.0'))% complete"
            }
            catch {
                Write-Host "Error during API call for offset $offset"
                Write-Host "Error: $($_.Exception.Message)"
                break
            }

        } while ($offset -lt $totalCount)

        if ($executionDetails.Count -gt 0) {
            # Export the data to the workflow-specific CSV file
            $executionDetails | Export-Csv -Path $workflowFile -NoTypeInformation -Force
            Write-Host "Execution details for workflow $workflowId exported to $workflowFile"
            Write-Host "Total records exported: $($executionDetails.Count)"
        }
        else {
            Write-Host "No execution details found for workflow $workflowId"
        }
    }
    catch {
        Write-Host "Error processing workflow ID: $workflowId"
        Write-Host "Error: $($_.Exception.Message)"
        continue  # Continue to next workflow
    }
}

Write-Host "`nAll workflows processing completed!"
Write-Host "Summary:"
Write-Host "- Total workflows processed: $($workflows.Count)"
Write-Host "- Output directory: $outputDir"
