$workflows = Import-Csv "your_workflow_file.csv"
$outputDir = "output"
$output2Dir = "output2"
$output3Dir = "output3"
$prefix = "FAILED"
$baseUrl = "your_base_url_here"
$headers = @{
    "Authorization" = "Bearer your_token_here"
    "Content-Type" = "application/json"
}

# Create directories if they don't exist
foreach ($dir in @($outputDir, $output2Dir, $output3Dir)) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir | Out-Null
        Write-Host "Created directory: $dir"
    }
}

foreach ($workflow in $workflows) {
    $workflowId = $workflow.WorkflowId.Trim()
    Write-Host "Processing Workflow ID: $workflowId"
    
    $file1Path = Join-Path $outputDir "WF-$prefix-$workflowId.csv"
    
    if (Test-Path $file1Path) {
        $workflowFile = Join-Path $output2Dir "WF-$prefix-$workflowId.csv"
        Write-Host "File exists in output, using output2"
    } else {
        $workflowFile = $file1Path
        Write-Host "Using output directory"
    }

    try {
        $executionDetails = @()
        $uri = "$baseUrl/$workflowId/execution?count=true&filter=status eq 'failure'"
        $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers
        
        if ($response) {
            foreach ($execution in $response) {
                $executionDetails += [PSCustomObject]@{
                    WorkflowId = $workflowId
                    WorkflowName = $workflow.WorkflowName
                    ExecutionId = $execution.id
                    StartTime = $execution.started
                    EndTime = $execution.completed
                    Status = $execution.status
                    ErrorMessage = $execution.errorMessage
                }
            }
        }
    }
    catch {
        Write-Host "Error for workflow $workflowId: $($_.Exception.Message)"
        [PSCustomObject]@{
            WorkflowId = $workflowId
            WorkflowName = $workflow.WorkflowName
            ExecutionId = ""
            StartTime = ""
            EndTime = ""
            Status = "Error"
            ErrorMessage = $_.Exception.Message
        } | Export-Csv -Path $workflowFile -NoTypeInformation -Force
        continue
    }

    if ($executionDetails.Count -eq 0) {
        [PSCustomObject]@{
            WorkflowId = $workflowId
            WorkflowName = $workflow.WorkflowName
            ExecutionId = ""
            StartTime = ""
            EndTime = ""
            Status = "NoExecutions"
            ErrorMessage = ""
        } | Export-Csv -Path $workflowFile -NoTypeInformation -Force
        Write-Host "Created empty file: $workflowFile"
    }
    else {
        $executionDetails | Export-Csv -Path $workflowFile -NoTypeInformation -Force
        Write-Host "Created file with $($executionDetails.Count) records: $workflowFile"
    }

    $file2Path = Join-Path $output2Dir "WF-$prefix-$workflowId.csv"
    $file3Path = Join-Path $output3Dir "WF-$prefix-$workflowId.csv"

    if ((Test-Path $file1Path) -and (Test-Path $file2Path)) {
        Write-Host "Comparing files for workflow $workflowId"
        $data1 = Import-Csv $file1Path
        $data2 = Import-Csv $file2Path
        
        $differences = $data2 | Where-Object {
            $record2 = $_
            -not ($data1 | Where-Object {
                $_.ExecutionId -eq $record2.ExecutionId
            })
        }

        if ($differences) {
            $differences | Export-Csv -Path $file3Path -NoTypeInformation -Force
            Write-Host "Created difference file with $($differences.Count) records: $file3Path"
        }
        else {
            Write-Host "No differences found for workflow $workflowId"
            if (Test-Path $file3Path) {
                Remove-Item $file3Path -Force
                Write-Host "Removed previous difference file: $file3Path"
            }
        }
    }
}

# Move files from output2 to output
Write-Host "`nMoving files from output2 to output..."
if (Test-Path $output2Dir) {
    $output2Files = Get-ChildItem -Path $output2Dir -Filter "WF-$prefix-*.csv"
    foreach ($file in $output2Files) {
        $destinationPath = Join-Path $outputDir $file.Name
        if (Test-Path $destinationPath) {
            Remove-Item $destinationPath -Force
            Write-Host "Removed existing file: $destinationPath"
        }
        Move-Item -Path $file.FullName -Destination $outputDir -Force
        Write-Host "Moved file: $($file.Name) to output directory"
    }
    
    if ((Get-ChildItem -Path $output2Dir).Count -eq 0) {
        Remove-Item $output2Dir -Force
        Write-Host "Removed empty output2 directory"
    }
}

# Clean up empty output3 directory
if (Test-Path $output3Dir) {
    $output3Files = Get-ChildItem -Path $output3Dir -Filter "WF-$prefix-*.csv"
    if ($output3Files.Count -eq 0) {
        Remove-Item $output3Dir -Force
        Write-Host "Removed empty output3 directory"
    }
}

Write-Host "`nProcessing completed!"
Write-Host "- Files in $outputDir: Updated data"
if (Test-Path $output3Dir) {
    Write-Host "- Files in $output3Dir: Files with differences"
}
