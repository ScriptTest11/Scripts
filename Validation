# Import required modules
    Import-Module -Name "C:\Users\sagar.sapkota\OneDrive - Rheem Manufacturing Company\Documents\Testing\HCM\Script\LCSCalculation.psm1" -Force

function Start-Validation {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)]
        [hashtable]$SourceConfig,
        
        [Parameter(Mandatory=$true)]
        [string]$BackupFilePath,
        
        [Parameter(Mandatory=$true)]
        [hashtable]$EmailConfig,
        
        [Parameter(Mandatory=$true)]
        [string]$BackupFolder,

        [Parameter(Mandatory=$true)]
        [string]$SourceFolder,

        [Parameter(Mandatory=$true)]
        [string]$SftpUser,

        [Parameter(Mandatory=$true)]
        [string]$Password,

        [Parameter(Mandatory=$true)]
        [string]$SftpHost
    )

    $SecurePass = ConvertTo-SecureString $Password -AsPlainText -Force
    $Credential = New-Object System.Management.Automation.PSCredential ($SftpUser, $SecurePass)  
    $SFTPSession = New-SFTPSession -ComputerName $SftpHost -Credential $Credential -AcceptKey -Verbose
    Write-Host "SFTP session established to $SftpHost."

    # Create temp directory
$TempDir = "$env:TEMP\SFTPTemp"
if (!(Test-Path -Path $TempDir)) {
    New-Item -Path $TempDir -ItemType Directory -Force | Out-Null
}

    Write-Host "=========================================="
    Write-Host "Starting validation for source: $($SourceConfig.SourceName)"
    Write-Host "Processing file: $BackupFilePath"
    Write-Host "Process validation mode: $($SourceConfig.processValidation)"
    Write-Host "=========================================="

    # Validate that the CSV file exists
    if (-not (Test-Path -Path $BackupFilePath)) {
        Write-Error "CSV file not found: $BackupFilePath"
        return 1
    }

    try {
    if ($SourceConfig.SourceName = "HCM"){
    $employees = Import-Csv -Path $BackupFilePath -ErrorAction Stop | Where-Object {
    $_.COUNTRY -eq 'US' -and
    $_.EMPLOYEENUMBER -notin @(
        '125248401090',
        '125248401167',
        '124242402061',
        '125248401052',
        '700000008166',
        '700000005909',
        '124909006603',
        '125242411110',
        '124353502270',
        '125242400425',
        '125242411249'
    )
    }

    }
        
        Write-Host "Successfully imported $($employees.Count) employee records"
    }
    catch {
        Write-Error "Failed to import CSV file: $_"
        return 1
    }

    # ===========================================
    # STEP 1: HEADER VALIDATION (FAIL-FAST)
    # ===========================================
    Write-Host "Step 1: Header validation..."
    
    $headerLine = Get-Content -Path $BackupFilePath -TotalCount 1
    $headerColumns = $headerLine -split ','
    
    # Check header count
    if ($headerColumns.Count -ne $SourceConfig.HeaderCount) {
        $bodyMessage = "Header Count mismatch for $($SourceConfig.SourceName).`nExpected: $($SourceConfig.HeaderCount)`nFound: $($headerColumns.Count)`n`nPlease verify the file format and try again."
        Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Header Count Mismatch" -Body $bodyMessage
        Write-Host "Header count validation FAILED. Expected: $($SourceConfig.HeaderCount), Found: $($headerColumns.Count)"
        return 1
    }
    
    # Check header fields
    foreach ($requiredHeader in $SourceConfig.HeaderFields) {
        if ($headerColumns -notcontains $requiredHeader) {
            $bodyMessage = "Missing required header field '$requiredHeader' for $($SourceConfig.SourceName).`n`nRequired headers: $($SourceConfig.HeaderFields -join ', ')`n`nPlease verify the file format and try again."
            Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Missing Header Field" -Body $bodyMessage
            Write-Host "Header field validation FAILED. Missing: $requiredHeader"
            return 1
        }
    }
    
    Write-Host "Header validation passed successfully"

    # ===========================================
    # STEP 2: DATE VALIDATION (FAIL-FAST)
    # ===========================================
    Write-Host "Step 2: Date validation for all employees..."

    $inputFormat = $SourceConfig.DateFormat
    $invalidHireDateList = @()
    $missingHireDateList = @()
    $invalidTerminationDateList = @()

    foreach ($employee in $employees) {
        $employeeNumber = $employee.EMPLOYEENUMBER

        # Check hire dates
        if (![string]::IsNullOrWhiteSpace($employee.HIRE_DATE)) {
            try {
                [DateTime]::ParseExact($employee.HIRE_DATE, $inputFormat, $null) | Out-Null
            } catch {
                $invalidHireDateList += $employee
                Write-Host "Invalid hire date for employee $employeeNumber $($employee.HIRE_DATE)"
            }
        } else {
            $missingHireDateList += $employee
            Write-Host "Missing hire date for employee $employeeNumber"
        }
        
        # Check termination dates (if present)
        if (![string]::IsNullOrWhiteSpace($employee.TERMINATION_DATE)) {
            try {
                [DateTime]::ParseExact($employee.TERMINATION_DATE, $inputFormat, $null) | Out-Null
            } catch {
                $invalidTerminationDateList += $employee
                Write-Host "Invalid termination date for employee $employeeNumber $($employee.TERMINATION_DATE)"
            }
        }
    }

    # Create processing directory
    $processingDir = Join-Path $BackupFolder "report"
    if (-not (Test-Path $processingDir)) {
        New-Item -Path $processingDir -ItemType Directory -Force
    }

    # If date validation fails, send email and STOP
    if ($invalidHireDateList.Count -gt 0) {
        # Define CSV file path
        $csvFileName = "invalid_hire_dates_$($SourceConfig.SourceName)_$today.csv"
        $invalidHireDatePath = Join-Path $TempDir $csvFileName
        $csvReportPath = "$BackupFolder/report"

        # Export to CSV in temp directory
        $invalidHireDateList | Export-Csv -FilePath $invalidHireDatePath -NoTypeInformation -Encoding UTF8
        Write-Host "Temporary CSV file saved: $invalidHireDatePath"

        # Upload to SFTP
        Set-SFTPItem -SessionId $SFTPSession.SessionId -Path $localFilePath -Destination $csvReportPath
        Write-Host "Status report uploaded to SFTP: $csvReportPath"

        $bodyMessage = "Found $($invalidHireDateList.Count) employees with invalid hire dates for $($SourceConfig.SourceName).`nExpected format: $($SourceConfig.DateFormat)`n`nPlease fix the dates and resubmit the file."
        Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Invalid Hire Dates" -Body $bodyMessage -AttachmentPath $invalidHireDatePath
        Write-Host "Date validation FAILED - Invalid hire dates found"
        return 1
    }

    if ($missingHireDateList.Count -gt 0) {
        $missingHireDatePath = Join-Path $processingDir "missing_hire_dates_$($SourceConfig.SourceName).csv"
        $missingHireDateList | Export-Csv -Path $missingHireDatePath -NoTypeInformation
        
        $bodyMessage = "Found $($missingHireDateList.Count) employees with missing hire dates for $($SourceConfig.SourceName).`n`nPlease provide hire dates for all employees and resubmit the file."
        Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Missing Hire Dates" -Body $bodyMessage -AttachmentPath $missingHireDatePath
        Write-Host "Date validation FAILED - Missing hire dates found"
        return 1
    }

    if ($invalidTerminationDateList.Count -gt 0) {
        $invalidTermDatePath = Join-Path $processingDir "invalid_termination_dates_$($SourceConfig.SourceName).csv"
        $invalidTerminationDateList | Export-Csv -Path $invalidTermDatePath -NoTypeInformation
        
        $bodyMessage = "Found $($invalidTerminationDateList.Count) employees with invalid termination dates for $($SourceConfig.SourceName).`nExpected format: $($SourceConfig.DateFormat)`n`nPlease fix the dates and resubmit the file."
        Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Invalid Termination Dates" -Body $bodyMessage -AttachmentPath $invalidTermDatePath
        Write-Host "Date validation FAILED - Invalid termination dates found"
        return 1
    }

    Write-Host "Date validation passed successfully"

    # ===========================================
    # STEP 3: EMPLOYEE STATUS CALCULATION
    # ===========================================
    Write-Host "Step 3: Calculating employee status for all employees..."

    #$outputFormat = "yyyy-MM-dd'T'HH:mm:ss.fff'Z'"
    $lcsRules = $SourceConfig.LcsCalculationRules
    $statusCounts = @{}

    foreach ($employee in $employees) {
    
        if ($null -eq $SourceConfig) {
            Write-Error "SourceConfig is null."
            return
        }
        if ($null -eq $employee) {
            Write-Error "Employee object is null."
            return
        }
        if ($null -eq $lcsRules) {
            Write-Error "LcsRules is null."
            return
        }

        # Calculate status using source-specific logic

        $status = Get-EmployeeStatusBySource -SourceName $SourceConfig.SourceName -Employee $employee -LcsRules $lcsRules

        # Count status
        if ($statusCounts.ContainsKey($status)) {
            $statusCounts[$status] += 1
        } else {
            $statusCounts[$status] = 1
        }
    }

    Write-Host "Status calculation completed. Status counts: $($statusCounts | ConvertTo-Json -Compress)"

    # ===========================================
    # STEP 4: SAVE STATUS REPORT
    # ===========================================

Write-Host "Step 4: Saving daily status report directly to SFTP..."

# Prepare today's status report
$today = Get-Date -Format "yyyy-MM-dd"
$localFilePath = Join-Path $TempDir "status_count_$($SourceConfig.SourceName)_$today.json"
#$remoteFileName = "status_count_$($SourceConfig.SourceName)_$today.json"
$remotePath = "$BackupFolder/report"
$reportFile = "$BackupFolder/report/status_count_$($SourceConfig.SourceName)_$today.json"

$statusReport = @{
    Date = $today
    SourceName = $SourceConfig.SourceName
    TotalEmployees = $employees.Count
    StatusCounts = $statusCounts
    ProcessedAt = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
}

# Save JSON to temp file
$statusReport | ConvertTo-Json -Depth 3 | Out-File -FilePath $localFilePath -Encoding UTF8
Write-Host "Temporary status report saved: $localFilePath"

# Check if remote file exists
$reportFileExists = Get-SFTPChildItem -SessionId $SFTPSession.SessionId -Path $reportFile -ErrorAction SilentlyContinue

if ($reportFileExists) {
    Write-Host "Remote file exists. Removing before upload: $remotePath"
    Remove-SFTPItem -SessionId $SFTPSession.SessionId -Path $reportFile -Force
}

# Upload to SFTP
Set-SFTPItem -SessionId $SFTPSession.SessionId -Path $localFilePath -Destination $remotePath
Write-Host "Status report uploaded to SFTP: $remotePath"

# Clean up
Remove-Item $localFilePath -Force
Remove-SFTPSession -SessionId $SFTPSession.SessionId
    # ===========================================
    # STEP 5: TERMINATION SPIKE DETECTION
    # ===========================================
Write-Host "Step 5: Checking for termination spikes..."

# Get today's date
$today = Get-Date
Write-Host "Today is: $($today.DayOfWeek)"

# Determine target date for report
if ($today.DayOfWeek -eq 'Monday') {
    $targetDate = $today.AddDays(-2).ToString("yyyy-MM-dd")  # Friday
} else {
    $targetDate = $today.AddDays(-1).ToString("yyyy-MM-dd") # Yesterday
}

Write-Host "Target Date: $targetDate"

# Build report path for the target date
$yesterdayReportPath = "$BackupFolder/report/status_count_$($SourceConfig.SourceName)_$targetDate.json"

$termReportFileExists = Get-SFTPChildItem -SessionId $SFTPSession.SessionId -Path $yesterdayReportPath -ErrorAction SilentlyContinue
Write-Host "Report Path: $yesterdayReportPath"
        
        # Get termination threshold and today's termination count
        $terminationThreshold = $SourceConfig.LcsCalculationRules.TerminationThreshold
        $todayTerminations = if ($statusCounts.ContainsKey('terminated')) { $statusCounts['terminated'] } else { 0 }

# Check if yesterday's report file exists
        if (Test-Path $termReportFileExists) {
             try {
        # Load yesterday's report
        $yesterdayReport = Get-Content $yesterdayReportPath | ConvertFrom-Json
        $yesterdayTerminations = if ($yesterdayReport.StatusCounts.terminated) { $yesterdayReport.StatusCounts.terminated } else { 0 }

        # Calculate termination increase
        $terminationIncrease = $todayTerminations - $yesterdayTerminations

        Write-Host "Termination Analysis:"
        Write-Host "- Yesterday terminations: $yesterdayTerminations"
        Write-Host "- Today terminations: $todayTerminations"
        Write-Host "- Increase: $terminationIncrease"
        Write-Host "- Threshold: $terminationThreshold"

        # Check if spike exceeds threshold
        if ($terminationIncrease -gt $terminationThreshold) {
            Write-Host "TERMINATION SPIKE DETECTED!"
            Write-Host "   Termination increase ($terminationIncrease) exceeds threshold ($terminationThreshold)"

            # Prepare alert email
            $alertBody = @"
ALERT: Unusual termination spike detected for $($SourceConfig.SourceName)

Yesterday terminations: $yesterdayTerminations
Today terminations: $todayTerminations
Increase: $terminationIncrease
Threshold: $terminationThreshold

Processing has been stopped for manual review.
Please verify the data before reprocessing.

Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
"@

            # Send alert
            Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) TERMINATION SPIKE ALERT" -Body $alertBody

            Write-Host "Stopping process - mandatory field validation skipped due to termination spike"
            return 1
        } else {
            Write-Host "Termination increase within acceptable range"
        }
    } catch {
        Write-Host "Could not read yesterday's report: $_"
        Write-Host "Proceeding with validation (file issue)"
    }
} else {
    Write-Host "No yesterday report found - proceeding with validation (first run)"
}


    # ===========================================
    # STEP 6: MANDATORY FIELD VALIDATION (NON-TERMINATED ONLY)
    # ===========================================
    Write-Host "Step 6: Mandatory field validation for non-terminated employees..."

    $validationMessages = @()
    $nonTerminatedCount = 0

    foreach ($employee in $employees) {
        $employeeNumber = $employee.EMPLOYEENUMBER
        <#$employeeStartDate = if (![string]::IsNullOrWhiteSpace($employee.HIRE_DATE)) { $employee.HIRE_DATE } else { "NoValue" }
        $employeeStatus = $employee.EMPLOYEE_STATUS

        # Parse hire date (guaranteed to be valid from Step 2)
        $convertedHireDateDT = $null
        if (![string]::IsNullOrWhiteSpace($employee.HIRE_DATE)) {
            $convertedHireDateDT = [DateTime]::ParseExact($employee.HIRE_DATE, $inputFormat, $null)
        }#>

        # Calculate status using source-specific logic
        $status = Get-EmployeeStatusBySource -SourceName $SourceConfig.SourceName -Employee $employee -LcsRules $lcsRules

        # Check mandatory fields ONLY for non-terminated employees
        if ($status -ne 'terminated') {
            $nonTerminatedCount++
            
            $missingFields = @()
            
            foreach ($field in $SourceConfig.MandatoryFields) {
                $value = $employee.$field
                
                if ($null -eq $value) {
                    $missingFields += $field
                } elseif ($value -is [string] -and [string]::IsNullOrWhiteSpace($value)) {
                    $missingFields += $field
                }
            }

            if ($missingFields.Count -gt 0) {
                # Get employee name based on source configuration
                $employeeName = Get-EmployeeName -Employee $employee -SourceConfig $SourceConfig

                $validationMessages += [PSCustomObject]@{
                    EmployeeName  = $employeeName
                    EmployeeNumber = $employeeNumber
                    EmployeeStatus = $status
                    MissingFields = ($missingFields -join ', ')
                }
                
                Write-Host "Non-terminated employee $employeeName ($status) has missing fields: $($missingFields -join ', ')"
            }
        }
    }

    Write-Host "Mandatory field validation completed for $nonTerminatedCount non-terminated employees"
    Write-Host "   Found $($validationMessages.Count) employees with missing mandatory fields"

    # ===========================================
    # STEP 7: EMAIL REPORTING
    # ===========================================
    Write-Host "Step 7: Sending validation reports..."

    # Send validation issues report (only for non-terminated employees with missing fields)
    if ($validationMessages.Count -gt 0) {
        $csvPath = Join-Path $processingDir "HR_Validation_Report_$($SourceConfig.SourceName).csv"
        $validationMessages | Export-Csv -Path $csvPath -NoTypeInformation
        Write-Host "$csvPath"
        
        $bodyMessage = "Found $($validationMessages.Count) non-terminated employees with missing mandatory fields for $($SourceConfig.SourceName).`n`nGenerated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n`nPlease review the attached report and provide the missing information."
        
        Send-ValidationEmail -EmailConfig $EmailConfig -Subject "$($EmailConfig.Subject) - Missing Mandatory Fields" -Body $bodyMessage -AttachmentPath $csvPath
        
        Write-Host "Validation issues report sent: $($validationMessages.Count) employees"
    } else {
        Write-Host "No validation issues found for non-terminated employees"
    }

    # ===========================================
    # STEP 8: CONDITIONAL FILE PROCESSING
    # ===========================================
    Write-Host "Step 8: File processing based on validation results..."

      $SourceFileName = $($SourceConfig.SourceFileName)
      $sourceFilePath = Join-Path $SourceFolder $SourceFileName
      $hasValidationFailures = ($validationMessages.Count -gt 0)

      $processingFolder = Join-Path -Path $SourceFolder -ChildPath "processing"

        # Check if the folder exists; if not, create it
        if (-not (Test-Path -Path $processingFolder)) {
            New-Item -ItemType Directory -Path $processingFolder | Out-Null
        }

        # Now join the full file path
        $sailpointProcessingFilePath = Join-Path -Path $processingFolder -ChildPath $SourceFileName

    if ($SourceConfig.processValidation) {
        if (-not $hasValidationFailures) {
            Get-SFTPItem -SessionId $SFTPSession.SessionId -Path $sourceFilePath -Destination $sailpointProcessingFilePath
            Write-Host "File copied to backup folder (strict mode - validation passed): $sailpointProcessingFilePath"
        } else {
            Write-Host "File NOT copied to processing folder (validation failures found)"
            Write-Host "Missing mandatory fields: $($validationMessages.Count) employees"
            return 1
        }
    } else {
            Get-SFTPItem -SessionId $SFTPSession.SessionId -Path $sourceFilePath -Destination $sailpointProcessingFilePath
            Write-Host "File copied to backup folder (strict mode - validation passed): $sailpointProcessingFilePath"
        if ($hasValidationFailures) {
            Write-Host "Note: File copied despite $($validationMessages.Count) validation issues"
        }
    }

    Write-Host "=========================================="
    Write-Host "Validation completed successfully for $($SourceConfig.SourceName)"
    Write-Host "Summary:"
    Write-Host "- Total employees processed: $($employees.Count)"
    Write-Host "- Status counts: $($statusCounts | ConvertTo-Json -Compress)"
    Write-Host "- Non-terminated employees: $nonTerminatedCount"
    Write-Host "- Missing field issues: $($validationMessages.Count)"
    Write-Host "- File processing mode: $($SourceConfig.processValidation)"
    Write-Host "=========================================="
    return 0
}

# ===========================================
# HELPER FUNCTIONS
# ===========================================

function Get-EmployeeName {
    param (
        $Employee,
        $SourceConfig
    )

    $nameFields = $SourceConfig.EmployeeNameFields
    $firstName = $Employee.($nameFields.FirstName)
    $lastName = $Employee.($nameFields.LastName)
    
    return "$firstName $lastName"
}

function Send-ValidationEmail {
    param (
        [hashtable]$EmailConfig,
        [string]$Subject,
        [string]$Body,
        [string]$AttachmentPath = $null
    )

    $emailParams = @{
        From       = $EmailConfig.FromAddress
        To         = $EmailConfig.ToAddress
        Subject    = $Subject
        Body       = $Body
        SmtpServer = $EmailConfig.SmtpServer
    }
    
    if ($EmailConfig.CcAddress -and $EmailConfig.CcAddress.Count -gt 0) {
        $emailParams.Add("Cc", $EmailConfig.CcAddress)
    }
    
    if ($AttachmentPath -and (Test-Path $AttachmentPath)) {
        $emailParams.Add("Attachments", $AttachmentPath)
    }
    
    try {
        Send-MailMessage @emailParams -ErrorAction Stop
        Write-Host "Email sent successfully: $Subject"
    } catch {
        Write-Error "Failed to send email: $_"
    }
}

Export-ModuleMember -Function Start-Validation
