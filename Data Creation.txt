package org.example;

import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.CSVWriter;

import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class CSVProcessor {
    public static void main(String[] args) {
        try {
            LocalDate today = LocalDate.now();
            LocalDate yesterday = today.minusDays(1);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter hireDateFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");

            final int FIRSTNAME_COL = 1;
            final int LASTNAME_COL = 2;
            final int PAY_COL = 3;
            final int HDATE_COL = 4;
            final int ACTIONCODE_COL = 5;
            final int TERMINATION_DATE_COL = 6;
            final int COUNTRY_COL = 7;

            String yesterdayFilePath = "";
            String todayFilePath = "";

            String outputDirectory = "";
            String outputFileName = "Comp-" + today.format(formatter) + ".csv";
            Path outputPath = Paths.get(outputDirectory, outputFileName);

            Files.createDirectories(Paths.get(outputDirectory));

            List<String> yesterdayIds = new ArrayList<>();
            List<String> todayIds = new ArrayList<>();
            Map<String, String[]> todayDetails = new HashMap<>();
            Map<String, String[]> yesterdayDetails = new HashMap<>();

            // Read yesterday's file using OpenCSV
            try (CSVReader reader = new CSVReaderBuilder(new FileReader(yesterdayFilePath))
                    .withSkipLines(1)
                    .build()) {
                String[] values;
                while ((values = reader.readNext()) != null) {
                    if (values.length > 0) {
                        String empId = values[0];
                        yesterdayIds.add(empId);

                        String[] details = new String[2];
                        details[0] = values.length > ACTIONCODE_COL ? values[ACTIONCODE_COL].trim() : "";

                        if (values.length > TERMINATION_DATE_COL && !values[TERMINATION_DATE_COL].trim().isEmpty()) {
                            try {
                                LocalDate termDate = LocalDate.parse(values[TERMINATION_DATE_COL].trim(), hireDateFormatter);
                                details[1] = termDate.format(formatter);
                            } catch (Exception e) {
                                details[1] = values[TERMINATION_DATE_COL].trim();
                            }
                        } else {
                            details[1] = "";
                        }

                        yesterdayDetails.put(empId, details);
                    }
                }
            }

            // Read today's file using OpenCSV
            try (CSVReader reader = new CSVReaderBuilder(new FileReader(todayFilePath))
                    .withSkipLines(1)
                    .build()) {
                String[] values;
                while ((values = reader.readNext()) != null) {
                    if (values.length > 0) {
                        String empId = values[0];
                        todayIds.add(empId);

                        String[] details = new String[7];
                        details[0] = values.length > FIRSTNAME_COL ? values[FIRSTNAME_COL].trim() : "";
                        details[1] = values.length > LASTNAME_COL ? values[LASTNAME_COL].trim() : "";
                        details[2] = values.length > PAY_COL ? values[PAY_COL].trim() : "";

                        if (values.length > HDATE_COL && !values[HDATE_COL].trim().isEmpty()) {
                            try {
                                LocalDate hireDate = LocalDate.parse(values[HDATE_COL].trim(), hireDateFormatter);
                                details[3] = hireDate.format(formatter);
                            } catch (Exception e) {
                                details[3] = values[HDATE_COL].trim();
                            }
                        } else {
                            details[3] = "";
                        }

                        details[4] = values.length > ACTIONCODE_COL ? values[ACTIONCODE_COL].trim() : "";

                        if (values.length > TERMINATION_DATE_COL && !values[TERMINATION_DATE_COL].trim().isEmpty()) {
                            try {
                                LocalDate termDate = LocalDate.parse(values[TERMINATION_DATE_COL].trim(), hireDateFormatter);
                                details[5] = termDate.format(formatter);
                            } catch (Exception e) {
                                details[5] = values[TERMINATION_DATE_COL].trim();
                            }
                        } else {
                            details[5] = "";
                        }

                        details[6] = values.length > COUNTRY_COL ? values[COUNTRY_COL].trim() : "";

                        todayDetails.put(empId, details);
                    }
                }
            }

            Set<String> yesterdayIdSet = new HashSet<>(yesterdayIds);

            // Write to output file using CSVWriter
            try (CSVWriter writer = new CSVWriter(new FileWriter(outputPath.toFile()))) {
                // Write headers
                String[] headers = {
                        "yesterday-" + yesterday.format(formatter),
                        "today-" + today.format(formatter),
                        "empID_CHECK",
                        "FIRSTNAME",
                        "LASTNAME",
                        "PAY",
                        "HDATE",
                        "ACTIONCODETODAY",
                        "ACTIONCODEYESTERDAY",
                        "CHECK_ACTION_CODE",
                        "TERMINATION_DATE_YESTERDAY",
                        "TERMINATION_DATE_TODAY",
                        "CHECK_TERMINATION_DATE",
                        "COUNTRY"
                };
                writer.writeNext(headers);

                int maxLength = Math.max(yesterdayIds.size(), todayIds.size());

                for (int i = 0; i < maxLength; i++) {
                    String yesterdayId = i < yesterdayIds.size() ? yesterdayIds.get(i) : "";
                    String todayId = i < todayIds.size() ? todayIds.get(i) : "";

                    String checkResult = "";
                    if (!todayId.isEmpty()) {
                        checkResult = yesterdayIdSet.contains(todayId) ? "TRUE" : "FALSE";
                    }

                    String[] todayData = todayDetails.getOrDefault(todayId, new String[]{"", "", "", "", "", "", ""});
                    String[] yesterdayData = yesterdayDetails.getOrDefault(yesterdayId, new String[]{"", ""});

                    
                    String actionCodeCheck = "";
                    if (!todayId.isEmpty() && yesterdayIdSet.contains(todayId)) {
                        String yesterdayActionCode = yesterdayDetails.get(todayId)[0];
                        actionCodeCheck = todayData[4].equals(yesterdayActionCode) ? "TRUE" : "FALSE";
                    }

             
                    String terminationDateCheck = "";
                    if (!todayId.isEmpty() && yesterdayIdSet.contains(todayId)) {
                        String yesterdayTermDate = yesterdayDetails.get(todayId)[1];
                        terminationDateCheck = todayData[5].equals(yesterdayTermDate) ? "TRUE" : "FALSE";
                    }

               
                    String[] rowData = {
                            yesterdayId,
                            todayId,
                            checkResult,
                            todayData[0], // FirstName
                            todayData[1], // LastName
                            todayData[2], // Pay
                            todayData[3], // HDate
                            todayData[4], // ActionCodeToday
                            yesterdayData[0], // ActionCodeYesterday
                            actionCodeCheck, // Check Action Code
                            yesterdayData[1], // Termination Date Yesterday
                            todayData[5], // Termination Date Today
                            terminationDateCheck, // Check Termination Date
                            todayData[6]  // Country
                    };
                    writer.writeNext(rowData);
                }
            }

            System.out.println("Process completed successfully!");
            System.out.println("Created file: " + outputPath.toString());

        } catch (Exception e) {
            System.err.println("Error processing files: " + e.getMessage());
            e.printStackTrace();
        }
    }
}