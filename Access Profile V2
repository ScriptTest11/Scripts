```powershell
# Define file paths
$mainCsvPath = 'main_data.csv'       # CSV containing main data with accessprofiles (id empty or malformed)
$idMappingCsvPath = 'id_mapping.csv' # CSV containing accessprofiles name and corresponding id

# Import CSV files
$mainData = Import-Csv -Path $mainCsvPath
$idMapping = Import-Csv -Path $idMappingCsvPath

# Create a lookup hashtable for name to id mapping
$idLookup = @{}
foreach ($entry in $idMapping) {
    $idLookup[$entry.name] = $entry.id
}

# Helper function to safely parse JSON or return empty array
function Safe-ConvertFromJson {
    param([string]$jsonString)
    if ([string]::IsNullOrWhiteSpace($jsonString)) {
        return @()
    }
    try {
        return $jsonString | ConvertFrom-Json
    } catch {
        Write-Warning "Failed to parse JSON: $_"
        return @()
    }
}

# Process each record in main data
foreach ($record in $mainData) {
    if ($record.accessprofiles) {
        # Safely parse accessprofiles JSON string
        $profiles = Safe-ConvertFromJson -jsonString $record.accessprofiles

        # If $profiles is a single object, convert to array for uniform processing
        if ($profiles -and -not ($profiles -is [System.Array])) {
            $profiles = @($profiles)
        }

        # For each profile, if id is empty, fill it from lookup
        foreach ($profile in $profiles) {
            if ([string]::IsNullOrEmpty($profile.id) -and $idLookup.ContainsKey($profile.name)) {
                $profile.id = $idLookup[$profile.name]
            }
        }

        # Convert back to JSON string
        $record.accessprofiles = $profiles | ConvertTo-Json -Depth 5
    } else {
        # If accessprofiles is empty or missing, set to empty array JSON
        $record.accessprofiles = '[]'
    }
}
