# Configuration
$baseUrl = "YOUR_API_BASE_URL"
$headers = @{
    "Authorization" = "Bearer YOUR_TOKEN"
    "Content-Type" = "application/json"
}

# Create a directory to store the output
$outputDir = "Workflow_Executions"
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir
}

function Get-WorkflowPrefix {
    param (
        [string]$workflowId
    )
    
    $prefixMapping = @{
        '123' = 'ABC'
        '456' = 'DEF'
        '789' = 'GHI'
        '234' = 'JKL'
        # Add more mappings as needed
    }
    
    foreach ($id in $prefixMapping.Keys) {
        if ($workflowId.StartsWith($id)) {
            return $prefixMapping[$id]
        }
    }
    
    return 'XYZ'
}

function Get-WorkflowExecutions {
    param (
        [string]$workflowId,
        [string]$workflowName
    )

    try {
        $executionDetails = @()
        $offset = 0
        $limit = 250
        $totalCount = 0
        $firstRun = $true

        do {
            Write-Host "Fetching executions for workflow $workflowId - $workflowName (offset: $offset, limit: $limit)"
            
            $uri = "$baseUrl/$workflowId/execution?count=true&filter=status eq 'failure'&offset=$offset&limit=$limit"
            $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers -ResponseHeadersVariable responseHeaders
            
            if ($firstRun) {
                $totalCount = [int]($responseHeaders.'x-total-count'[0])
                Write-Host "Total executions to fetch: $totalCount"
                $firstRun = $false
            }

            foreach ($execution in $response) {
                $executionDetails += [PSCustomObject]@{
                    WorkflowId = $workflowId
                    WorkflowName = $workflowName
                    ExecutionId = $execution.id
                    StartTime = $execution.started
                    EndTime = $execution.completed
                }
            }

            $offset += $limit
            $percentComplete = [math]::Min(($offset / $totalCount) * 100, 100)
            Write-Host "Progress: $($percentComplete.ToString('0.0'))% complete"

        } while ($offset -lt $totalCount)

        $prefix = Get-WorkflowPrefix -workflowId $workflowId
        $csvFileName = "WF-$prefix-$workflowId.csv"
        $csvPath = Join-Path $outputDir $csvFileName

        $executionDetails | Export-Csv -Path $csvPath -NoTypeInformation
        Write-Host "Successfully exported $($executionDetails.Count) execution details to $csvFileName"
        
        return $csvPath
    }
    catch {
        Write-Host "Error getting execution details for workflow ID: $workflowId"
        Write-Host $_.Exception.Message
        return $null
    }
}

try {
    # API call to get workflows
    Write-Host "Making API call to get workflows..."
    $response = Invoke-RestMethod -Uri "$baseUrl/workflows" -Method Get -Headers $headers
    
    # Create workflow mapping file
    $workflowMapping = $response | ForEach-Object {
        [PSCustomObject]@{
            WorkflowId = $_.id
            WorkflowName = $_.name
        }
    }

    # Save workflow mapping to CSV
    $mappingFile = Join-Path $outputDir "WF-Names.csv"
    $workflowMapping | Export-Csv -Path $mappingFile -NoTypeInformation
    Write-Host "Successfully saved workflow mapping to WF-Names.csv"
    Write-Host "Total workflows found: $($workflowMapping.Count)"
}
catch {
    Write-Host "Error making initial API call"
    Write-Host "Error message: $($_.Exception.Message)"
}

# Print final file listing
Write-Host "`nFiles created:"
Get-ChildItem -Path $outputDir -File | ForEach-Object {
    Write-Host $_.FullName
}
